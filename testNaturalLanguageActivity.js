import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const BASE_URL = process.env.NODE_ENV === 'production' 
    ? 'https://monpetitroadtrip-server.vercel.app' 
    : 'http://localhost:3000';

// Fonction pour tester la cr√©ation d'activit√© via langage naturel
async function testNaturalLanguageActivity() {
    try {
        // Vous devez remplacer ces valeurs par des tokens JWT valides et des IDs existants
        const authToken = 'YOUR_JWT_TOKEN_HERE';
        const roadtripId = 'YOUR_ROADTRIP_ID_HERE';
        const stepId = 'YOUR_STEP_ID_HERE';

        const testPrompts = [
            {
                prompt: "D√©jeuner au restaurant Le Procope demain √† 12h30",
                userLocation: null
            },
            {
                prompt: "Visite guid√©e du Louvre de 10h √† 12h avec r√©servation",
                userLocation: { latitude: 48.8566, longitude: 2.3522 } // Paris
            },
            {
                prompt: "Course √† pied dans le parc dans 1 heure pendant 45 minutes",
                userLocation: { latitude: 48.8566, longitude: 2.3522 } // Paris - test avec g√©olocalisation
            },
            {
                prompt: "Shopping aux Champs-√âlys√©es cet apr√®s-midi",
                userLocation: null
            },
            {
                prompt: "Spa et d√©tente √† l'h√¥tel en fin de journ√©e pour 2 heures",
                userLocation: null
            },
            {
                prompt: "Concert jazz au New Morning ce soir 21h, prix 35‚Ç¨",
                userLocation: { latitude: 45.7640, longitude: 4.8357 } // Lyon - test avec g√©olocalisation
            }
        ];

        console.log('üéØ Test de cr√©ation d\'activit√©s via langage naturel\n');

        for (let i = 0; i < testPrompts.length; i++) {
            const test = testPrompts[i];
            console.log(`üìù Test ${i + 1}: "${test.prompt}"`);
            if (test.userLocation) {
                console.log(`üìç Avec g√©olocalisation: ${test.userLocation.latitude}, ${test.userLocation.longitude}`);
            }

            try {
                const requestBody = { prompt: test.prompt };
                if (test.userLocation) {
                    requestBody.userLatitude = test.userLocation.latitude;
                    requestBody.userLongitude = test.userLocation.longitude;
                }

                const response = await fetch(`${BASE_URL}/api/roadtrips/${roadtripId}/steps/${stepId}/activities/natural-language`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify(requestBody)
                });

                const result = await response.json();

                if (response.ok) {
                    console.log('‚úÖ Succ√®s:');
                    console.log('   Nom:', result.activity.name);
                    console.log('   Type:', result.activity.type);
                    console.log('   Adresse:', result.activity.address);
                    console.log('   D√©but:', result.activity.startDateTime);
                    console.log('   Fin:', result.activity.endDateTime);
                    console.log('   Dur√©e:', result.activity.duration, result.activity.typeDuration);
                    console.log('   Prix:', result.activity.price, result.activity.currency);
                    console.log('   Notes:', result.activity.notes);
                    console.log('   Coordonn√©es:', `${result.activity.latitude}, ${result.activity.longitude}`);
                    if (result.extractedData.useUserLocation) {
                        console.log('   üåç G√©olocalisation utilisateur utilis√©e');
                    }
                    if (result.extractedData.useStepLocation) {
                        console.log('   üìç Adresse de l\'√©tape utilis√©e');
                    }
                    console.log('   Donn√©es extraites:', JSON.stringify(result.extractedData, null, 2));
                } else {
                    console.log('‚ùå Erreur:', result.msg || result.error);
                }
            } catch (error) {
                console.log('‚ùå Erreur r√©seau:', error.message);
            }

            console.log('\n' + '‚îÄ'.repeat(50) + '\n');
        }

    } catch (error) {
        console.error('Erreur lors du test:', error);
    }
}

// Fonction pour tester avec des donn√©es r√©elles
async function testWithRealData() {
    console.log('‚ö†Ô∏è  Pour tester cette fonctionnalit√©:');
    console.log('1. D√©marrez le serveur avec: npm start');
    console.log('2. Connectez-vous et r√©cup√©rez un token JWT');
    console.log('3. Cr√©ez un roadtrip et une √©tape, r√©cup√©rez leurs IDs');
    console.log('4. Modifiez les variables authToken, roadtripId et stepId dans ce fichier');
    console.log('5. Relancez ce test\n');
    
    console.log('Exemples de prompts support√©s:');
    console.log('- "D√©jeuner au restaurant Le Procope demain √† 12h30"');
    console.log('- "Visite guid√©e du Louvre de 10h √† 12h avec r√©servation"');
    console.log('- "Course √† pied dans le parc dans 1 heure pendant 45 minutes"');
    console.log('- "Shopping aux Champs-√âlys√©es cet apr√®s-midi"');
    console.log('- "Randonn√©e en montagne samedi de 8h √† 16h"');
    console.log('- "Spa et d√©tente √† l\'h√¥tel en fin de journ√©e"');
    console.log('- "Concert jazz au New Morning ce soir 21h"');
    console.log('- "Cours de cuisine fran√ßaise demain matin"');
}

// D√©commenter pour tester (apr√®s avoir configur√© les tokens)
// testNaturalLanguageActivity();

// Afficher les instructions
testWithRealData();
