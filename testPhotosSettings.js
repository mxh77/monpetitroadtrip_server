/**
 * Script de test pour la gestion des param√®tres photos dans les r√©cits
 * Ce script permet de tester l'activation/d√©sactivation de l'analyse photos
 */

import axios from 'axios';

// Configuration
const BASE_URL = 'http://localhost:3000'; // Ajustez selon votre configuration
const AUTH_TOKEN = 'YOUR_JWT_TOKEN_HERE'; // Remplacez par un token JWT valide

async function testPhotosSettings() {
    try {
        console.log('üöÄ Test de la gestion des param√®tres photos...');
        
        // 1. R√©cup√©rer les param√®tres actuels
        console.log('\nüìã 1. R√©cup√©ration des param√®tres actuels...');
        const currentSettings = await axios.get(`${BASE_URL}/api/settings`, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log('‚úÖ Param√®tres actuels:');
        console.log(`   - enablePhotosInStories: ${currentSettings.data.enablePhotosInStories}`);
        console.log(`   - systemPrompt: ${currentSettings.data.systemPrompt?.substring(0, 50)}...`);
        console.log(`   - algoliaSearchRadius: ${currentSettings.data.algoliaSearchRadius}m`);
        
        // 2. D√©sactiver l'analyse des photos
        console.log('\nüö´ 2. D√©sactivation de l\'analyse des photos...');
        const disablePhotos = await axios.put(`${BASE_URL}/api/settings`, {
            enablePhotosInStories: false
        }, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log('‚úÖ Photos d√©sactiv√©es:', disablePhotos.data.enablePhotosInStories);
        
        // 3. Activer l'analyse des photos
        console.log('\nüì∏ 3. Activation de l\'analyse des photos...');
        const enablePhotos = await axios.put(`${BASE_URL}/api/settings`, {
            enablePhotosInStories: true
        }, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log('‚úÖ Photos activ√©es:', enablePhotos.data.enablePhotosInStories);
        
        // 4. Test avec valeur invalide
        console.log('\n‚ùå 4. Test avec valeur invalide...');
        try {
            await axios.put(`${BASE_URL}/api/settings`, {
                enablePhotosInStories: "invalid"
            }, {
                headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
            });
        } catch (error) {
            console.log('‚úÖ Validation fonctionne - valeur invalide rejet√©e');
        }
        
        console.log('\n‚úÖ Tous les tests r√©ussis!');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
        
        if (error.response?.status === 401) {
            console.log('üîê V√©rifiez votre token d\'authentification');
        }
    }
}

async function testStoryGenerationWithSettings(stepId) {
    try {
        console.log('\nüéØ Test de g√©n√©ration de r√©cit avec param√®tres...');
        
        // 1. D√©sactiver les photos
        await axios.put(`${BASE_URL}/api/settings`, {
            enablePhotosInStories: false
        }, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log('üìù G√©n√©ration avec photos d√©sactiv√©es...');
        const storyWithoutPhotos = await axios.get(`${BASE_URL}/api/steps/${stepId}/story`, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log(`   - Mod√®le: ${storyWithoutPhotos.data.model}`);
        console.log(`   - Photos analys√©es: ${storyWithoutPhotos.data.photosAnalyzed || 0}`);
        
        // 2. Activer les photos
        await axios.put(`${BASE_URL}/api/settings`, {
            enablePhotosInStories: true
        }, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log('üì∏ G√©n√©ration avec photos activ√©es...');
        const storyWithPhotos = await axios.get(`${BASE_URL}/api/steps/${stepId}/story`, {
            headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
        });
        
        console.log(`   - Mod√®le: ${storyWithPhotos.data.model}`);
        console.log(`   - Photos analys√©es: ${storyWithPhotos.data.photosAnalyzed || 0}`);
        
        console.log('\nüìä Comparaison:');
        console.log(`Photos OFF: ${storyWithoutPhotos.data.model} (${storyWithoutPhotos.data.photosAnalyzed || 0} photos)`);
        console.log(`Photos ON:  ${storyWithPhotos.data.model} (${storyWithPhotos.data.photosAnalyzed || 0} photos)`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test de g√©n√©ration:', error.response?.data || error.message);
    }
}

// Instructions d'utilisation
console.log(`
üìù Instructions pour utiliser ce script de test:

1. D√©marrez votre serveur: npm start
2. Remplacez AUTH_TOKEN par un token JWT valide d'un utilisateur authentifi√©
3. Ex√©cutez: node testPhotosSettings.js

üí° Pour tester avec un step sp√©cifique:
   - Remplacez STEP_ID dans le code
   - D√©commentez la ligne testStoryGenerationWithSettings

üîß Tests effectu√©s:
   - R√©cup√©ration des param√®tres
   - Activation/d√©sactivation des photos
   - Validation des donn√©es
   - Impact sur la g√©n√©ration de r√©cits

üìä API endpoints test√©s:
   - GET /api/settings
   - PUT /api/settings
   - GET /api/steps/{id}/story (avec param√®tres)
`);

// D√©commentez pour ex√©cuter les tests
// testPhotosSettings();

// D√©commentez et remplacez STEP_ID pour tester avec un step sp√©cifique
// testStoryGenerationWithSettings('YOUR_STEP_ID_HERE');
