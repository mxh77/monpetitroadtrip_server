const mongoose = require('mongoose');
const ActionExecutor = require('./server/services/actionExecutor');

async function testTaskCreation() {
    try {
        // Connexion √† MongoDB
        await mongoose.connect('mongodb://localhost:27017/monpetitroadtrip', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('‚úÖ Connexion MongoDB √©tablie');
        
        const actionExecutor = new ActionExecutor();
        
        // Test 1: taskName est une string normale
        console.log('\nüß™ Test 1: taskName string normale');
        const entities1 = {
            name: 'R√©server un h√¥tel',
            notes: 'Test avec string normale'
        };
        const result1 = await actionExecutor.addTask('675b86c0e3c123456789abcd', entities1, '675b86c0e3c123456789abcd');
        console.log('‚úÖ Test 1 r√©ussi:', result1.message);
        
        // Test 2: taskName avec des espaces
        console.log('\nüß™ Test 2: taskName avec espaces');
        const entities2 = {
            name: '  Acheter des billets de train  ',
            notes: 'Test avec espaces'
        };
        const result2 = await actionExecutor.addTask('675b86c0e3c123456789abcd', entities2, '675b86c0e3c123456789abcd');
        console.log('‚úÖ Test 2 r√©ussi:', result2.message);
        
        // Test 3: taskName est null (doit √©chouer)
        console.log('\nüß™ Test 3: taskName null');
        try {
            const entities3 = {
                name: null,
                notes: 'Test avec null'
            };
            await actionExecutor.addTask('675b86c0e3c123456789abcd', entities3, '675b86c0e3c123456789abcd');
            console.log('‚ùå Test 3 ne devrait pas r√©ussir');
        } catch (error) {
            console.log('‚úÖ Test 3 r√©ussi (erreur attendue):', error.message);
        }
        
        // Test 4: taskName est un nombre (doit √™tre converti en string)
        console.log('\nüß™ Test 4: taskName number');
        const entities4 = {
            name: 12345,
            notes: 'Test avec number'
        };
        const result4 = await actionExecutor.addTask('675b86c0e3c123456789abcd', entities4, '675b86c0e3c123456789abcd');
        console.log('‚úÖ Test 4 r√©ussi:', result4.message);
        
        // Test 5: taskName est un objet (doit √™tre converti en string)
        console.log('\nüß™ Test 5: taskName object');
        const entities5 = {
            name: { task: 'Pr√©parer les documents' },
            notes: 'Test avec object'
        };
        const result5 = await actionExecutor.addTask('675b86c0e3c123456789abcd', entities5, '675b86c0e3c123456789abcd');
        console.log('‚úÖ Test 5 r√©ussi:', result5.message);
        
        // Test 6: taskName est undefined (doit √©chouer)
        console.log('\nüß™ Test 6: taskName undefined');
        try {
            const entities6 = {
                notes: 'Test avec undefined'
            };
            await actionExecutor.addTask('675b86c0e3c123456789abcd', entities6, '675b86c0e3c123456789abcd');
            console.log('‚ùå Test 6 ne devrait pas r√©ussir');
        } catch (error) {
            console.log('‚úÖ Test 6 r√©ussi (erreur attendue):', error.message);
        }
        
        // Test 7: V√©rifier la cat√©gorisation automatique
        console.log('\nüß™ Test 7: Cat√©gorisation automatique');
        const testCategories = [
            { name: 'R√©server un restaurant', expectedCategory: 'booking' },
            { name: 'Pr√©parer passeport', expectedCategory: 'documents' },
            { name: 'Faire la valise', expectedCategory: 'packing' },
            { name: 'Prendre rendez-vous m√©decin', expectedCategory: 'health' },
            { name: 'Louer une voiture', expectedCategory: 'transport' },
            { name: 'Chercher un h√©bergement', expectedCategory: 'accommodation' },
            { name: 'Visiter un mus√©e', expectedCategory: 'activities' },
            { name: 'Changer de l\'argent', expectedCategory: 'finances' },
            { name: 'Configurer t√©l√©phone', expectedCategory: 'communication' },
            { name: 'Planifier l\'itin√©raire', expectedCategory: 'preparation' },
            { name: 'Autre chose', expectedCategory: 'other' }
        ];
        
        for (const test of testCategories) {
            const category = actionExecutor.determineTaskCategory(test.name);
            if (category === test.expectedCategory) {
                console.log(`‚úÖ "${test.name}" ‚Üí ${category}`);
            } else {
                console.log(`‚ùå "${test.name}" ‚Üí ${category} (attendu: ${test.expectedCategory})`);
            }
        }
        
        console.log('\n‚úÖ Tous les tests termin√©s avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    } finally {
        await mongoose.disconnect();
        console.log('‚úÖ Connexion MongoDB ferm√©e');
    }
}

// Ex√©cuter les tests
testTaskCreation();
