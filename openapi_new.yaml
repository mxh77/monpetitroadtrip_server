openapi: 3.0.3
info:
  title: Mon Petit Roadtrip API
  description: |
    API complète pour la gestion de roadtrips avec IA, synchronisation et gestion asynchrone.
    
    ## Fonctionnalités principales
    - **Authentification JWT** avec gestion d'utilisateurs
    - **CRUD complet des roadtrips** avec support multimédia
    - **Gestion d'étapes** (Stage/Stop) avec coordonnées GPS
    - **Hébergements et activités** par étape
    - **Génération IA** de roadtrips complets et d'éléments individuels
    - **Système de tâches** de préparation de voyage
    - **Calcul asynchrone** des temps de trajet
    - **Intégration Google Maps** pour directions et avis
    - **Assistant conversationnel IA** pour modifications en langage naturel
    - **Génération de récits de voyage** avec photos
    
    ## Architecture
    L'API suit une architecture RESTful avec support des jobs asynchrones pour les opérations longues.
    Toutes les routes nécessitent une authentification JWT sauf `/auth/register` et `/auth/login`.
    
  version: 2.0.0
  contact:
    name: Mon Petit Roadtrip
    email: contact@monpetitroadtrip.com
    url: https://monpetitroadtrip.com

servers:
  - url: http://localhost:3001
    description: Serveur de développement local
  - url: https://api.monpetitroadtrip.com
    description: Serveur de production

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Authentification via token JWT.
        Format: `Authorization: Bearer <token>`

  schemas:
    # ===== MODÈLES PRINCIPAUX =====
    
    User:
      type: object
      required:
        - _id
        - username
        - email
        - dateCreated
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
          description: "Identifiant unique MongoDB"
        username:
          type: string
          example: "jean_dupont"
          description: "Nom d'utilisateur unique"
        email:
          type: string
          format: email
          example: "jean.dupont@email.com"
          description: "Adresse email unique"
        dateCreated:
          type: string
          format: date-time
          example: "2024-01-20T10:00:00.000Z"
          description: "Date de création du compte"

    Roadtrip:
      type: object
      required:
        - _id
        - userId
        - name
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef0"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
          description: "Référence vers l'utilisateur propriétaire"
        name:
          type: string
          example: "Mon Roadtrip en France"
          description: "Nom du roadtrip"
        startLocation:
          type: string
          example: "Paris, France"
          description: "Lieu de départ"
        startDateTime:
          type: string
          format: date-time
          example: "2024-08-01T09:00:00.000Z"
          description: "Date et heure de début"
        endLocation:
          type: string
          example: "Nice, France"
          description: "Lieu d'arrivée"
        endDateTime:
          type: string
          format: date-time
          example: "2024-08-15T18:00:00.000Z"
          description: "Date et heure de fin"
        currency:
          type: string
          enum: [EUR, USD, CAD]
          default: EUR
          example: "EUR"
          description: "Devise utilisée pour les prix"
        notes:
          type: string
          example: "Vacances d'été en famille"
          description: "Notes personnelles"
        photos:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Photos associées"
        documents:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Documents associés"
        thumbnail:
          $ref: '#/components/schemas/File'
          description: "Image miniature"
        steps:
          type: array
          items:
            type: string
            format: objectid
          description: "IDs des étapes du roadtrip"

    RoadtripDetailed:
      allOf:
        - $ref: '#/components/schemas/Roadtrip'
        - type: object
          properties:
            steps:
              type: array
              items:
                $ref: '#/components/schemas/StepDetailed'
              description: "Étapes complètes avec hébergements et activités"

    Step:
      type: object
      required:
        - _id
        - userId
        - roadtripId
        - type
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef2"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
        roadtripId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef0"
        type:
          type: string
          enum: [Stage, Stop]
          example: "Stage"
          description: "Type d'étape - Stage (lieu de séjour) ou Stop (arrêt court)"
        name:
          type: string
          example: "Paris"
          description: "Nom de l'étape"
        address:
          type: string
          example: "Paris, France"
          description: "Adresse complète"
        latitude:
          type: number
          format: float
          example: 48.8566
          description: "Latitude GPS"
        longitude:
          type: number
          format: float
          example: 2.3522
          description: "Longitude GPS"
        arrivalDateTime:
          type: string
          format: date-time
          example: "2024-08-01T14:00:00.000Z"
          description: "Date et heure d'arrivée"
        departureDateTime:
          type: string
          format: date-time
          example: "2024-08-03T10:00:00.000Z"
          description: "Date et heure de départ"
        travelTimePreviousStep:
          type: integer
          example: 120
          description: "Temps de trajet depuis l'étape précédente (en minutes)"
        distancePreviousStep:
          type: number
          format: float
          example: 350.5
          description: "Distance depuis l'étape précédente (en km)"
        isArrivalTimeConsistent:
          type: boolean
          example: true
          description: "Cohérence des horaires d'arrivée"
        travelTimeNote:
          type: string
          enum: [ERROR, WARNING, OK]
          example: "OK"
          description: "Statut du calcul des temps de trajet"
        notes:
          type: string
          example: "Visite de la Tour Eiffel prévue"
          description: "Notes personnelles"
        photos:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Photos de l'étape"
        documents:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Documents de l'étape"
        thumbnail:
          $ref: '#/components/schemas/File'
          description: "Image miniature"
        accommodations:
          type: array
          items:
            type: string
            format: objectid
          description: "IDs des hébergements (uniquement pour type=Stage)"
        activities:
          type: array
          items:
            type: string
            format: objectid
          description: "IDs des activités (uniquement pour type=Stage)"
        story:
          type: string
          example: "Notre première journée à Paris..."
          description: "Récit généré par IA"

    StepDetailed:
      allOf:
        - $ref: '#/components/schemas/Step'
        - type: object
          properties:
            accommodations:
              type: array
              items:
                $ref: '#/components/schemas/Accommodation'
              description: "Hébergements complets avec détails"
            activities:
              type: array
              items:
                $ref: '#/components/schemas/Activity'
              description: "Activités complètes avec détails"

    Activity:
      type: object
      required:
        - _id
        - userId
        - stepId
        - name
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef3"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
        stepId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef2"
        active:
          type: boolean
          default: true
          description: "Activité active ou désactivée"
        type:
          type: string
          enum: [Randonnée, Courses, Visite, Transport, Restaurant, Autre]
          example: "Visite"
          description: "Type d'activité"
        name:
          type: string
          example: "Musée du Louvre"
          description: "Nom de l'activité"
        address:
          type: string
          example: "Rue de Rivoli, 75001 Paris"
          description: "Adresse de l'activité"
        latitude:
          type: number
          format: float
          example: 48.8606
          description: "Latitude GPS"
        longitude:
          type: number
          format: float
          example: 2.3376
          description: "Longitude GPS"
        website:
          type: string
          format: uri
          example: "https://www.louvre.fr"
          description: "Site web officiel"
        phone:
          type: string
          example: "+33 1 40 20 50 50"
          description: "Numéro de téléphone"
        email:
          type: string
          format: email
          example: "info@louvre.fr"
          description: "Adresse email"
        startDateTime:
          type: string
          format: date-time
          example: "2024-08-01T10:00:00.000Z"
          description: "Date et heure de début"
        endDateTime:
          type: string
          format: date-time
          example: "2024-08-01T12:00:00.000Z"
          description: "Date et heure de fin"
        duration:
          type: integer
          example: 120
          description: "Durée en minutes/heures/jours selon typeDuration"
        typeDuration:
          type: string
          enum: [M, H, J]
          example: "H"
          description: "Unité de durée - M(inutes), H(eures), J(ours)"
        reservationNumber:
          type: string
          example: "LV20240801-123"
          description: "Numéro de réservation"
        price:
          type: number
          format: float
          example: 25.50
          description: "Prix en devise spécifiée"
        currency:
          type: string
          enum: [USD, CAD, EUR]
          default: EUR
          example: "EUR"
          description: "Devise du prix"
        trailDistance:
          type: number
          format: float
          example: 12.5
          description: "Distance de randonnée (en km)"
        trailElevation:
          type: number
          format: float
          example: 450
          description: "Dénivelé de randonnée (en m)"
        trailType:
          type: string
          example: "Boucle"
          description: "Type de sentier de randonnée"
        notes:
          type: string
          example: "Réserver à l'avance recommandé"
          description: "Notes personnelles"
        photos:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Photos de l'activité"
        documents:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Documents de l'activité"
        thumbnail:
          $ref: '#/components/schemas/File'
          description: "Image miniature"
        algoliaId:
          type: string
          example: "trail_123456"
          description: "Référence Algolia optionnelle pour randonnées"

    Accommodation:
      type: object
      required:
        - _id
        - userId
        - stepId
        - name
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef4"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
        stepId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef2"
        active:
          type: boolean
          default: true
          description: "Hébergement actif ou désactivé"
        name:
          type: string
          example: "Hôtel du Louvre"
          description: "Nom de l'hébergement"
        address:
          type: string
          example: "Place André Malraux, 75001 Paris"
          description: "Adresse complète"
        latitude:
          type: number
          format: float
          example: 48.8642
          description: "Latitude GPS"
        longitude:
          type: number
          format: float
          example: 2.3353
          description: "Longitude GPS"
        website:
          type: string
          format: uri
          example: "https://www.hoteldulouvre.com"
          description: "Site web officiel"
        phone:
          type: string
          example: "+33 1 44 58 38 38"
          description: "Numéro de téléphone"
        email:
          type: string
          format: email
          example: "reservation@hoteldulouvre.com"
          description: "Email de réservation"
        reservationNumber:
          type: string
          example: "HDL20240801-456"
          description: "Numéro de réservation"
        confirmationDateTime:
          type: string
          format: date-time
          example: "2024-07-15T14:30:00.000Z"
          description: "Date et heure de confirmation"
        arrivalDateTime:
          type: string
          format: date-time
          example: "2024-08-01T15:00:00.000Z"
          description: "Date et heure d'arrivée (check-in)"
        departureDateTime:
          type: string
          format: date-time
          example: "2024-08-03T11:00:00.000Z"
          description: "Date et heure de départ (check-out)"
        nights:
          type: integer
          example: 2
          description: "Nombre de nuits (calculé automatiquement)"
        price:
          type: number
          format: float
          example: 180.00
          description: "Prix total en devise spécifiée"
        currency:
          type: string
          enum: [USD, CAD, EUR]
          default: EUR
          example: "EUR"
          description: "Devise du prix"
        notes:
          type: string
          example: "Chambre avec vue sur la Seine"
          description: "Notes personnelles"
        photos:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Photos de l'hébergement"
        documents:
          type: array
          items:
            $ref: '#/components/schemas/File'
          description: "Documents de l'hébergement"
        thumbnail:
          $ref: '#/components/schemas/File'
          description: "Image miniature"

    File:
      type: object
      required:
        - _id
        - fileId
        - url
        - type
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef5"
        fileId:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          description: "UUID unique du fichier"
        name:
          type: string
          example: "tour_eiffel.jpg"
          description: "Nom original du fichier"
        url:
          type: string
          format: uri
          example: "https://storage.googleapis.com/bucket/tour_eiffel.jpg"
          description: "URL publique du fichier"
        type:
          type: string
          enum: [photo, document, thumbnail]
          example: "photo"
          description: "Type de fichier"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-01T10:30:00.000Z"
          description: "Date de création"

    # ===== MODÈLES UTILITAIRES =====
    
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: "Page actuelle"
        limit:
          type: integer
          example: 10
          description: "Nombre d'éléments par page"
        total:
          type: integer
          example: 156
          description: "Nombre total d'éléments"
        pages:
          type: integer
          example: 16
          description: "Nombre total de pages"

    ErrorResponse:
      type: object
      properties:
        msg:
          type: string
          example: "Validation error"
          description: "Message d'erreur principal"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: "Erreurs détaillées par champ"

    SuccessMessage:
      type: object
      properties:
        msg:
          type: string
          example: "Operation completed successfully"
          description: "Message de succès"

    # ===== MODÈLES SPÉCIALISÉS =====
    
    RoadtripTask:
      type: object
      required:
        - _id
        - userId
        - roadtripId
        - title
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef6"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
        roadtripId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef0"
        title:
          type: string
          example: "Réserver billets de train"
          description: "Titre de la tâche"
        description:
          type: string
          example: "Réserver les billets Paris-Nice"
          description: "Description détaillée"
        category:
          type: string
          enum: [preparation, booking, packing, documents, transport, accommodation, activities, health, finances, communication, other]
          example: "transport"
          description: "Catégorie de la tâche"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
          description: "Niveau de priorité"
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
          example: "pending"
          description: "Statut actuel"
        dueDate:
          type: string
          format: date-time
          example: "2024-07-25T12:00:00.000Z"
          description: "Date limite"
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: "Date de completion"
        assignedTo:
          type: string
          example: "Jean Dupont"
          description: "Personne responsable"
        estimatedDuration:
          type: integer
          example: 30
          description: "Durée estimée en minutes"
        reminderDate:
          type: string
          format: date-time
          description: "Date de rappel"
        order:
          type: integer
          example: 1
          description: "Ordre d'affichage"
        notes:
          type: string
          example: "Préférer les trains directs"
          description: "Notes additionnelles"
        attachments:
          type: array
          items:
            type: string
            format: objectid
          description: "Fichiers attachés"
        createdAt:
          type: string
          format: date-time
          description: "Date de création"
        updatedAt:
          type: string
          format: date-time
          description: "Date de modification"

    RoadtripTaskInput:
      type: object
      required: [title]
      properties:
        title:
          type: string
          example: "Réserver billets de train"
        description:
          type: string
          example: "Réserver les billets Paris-Nice"
        category:
          type: string
          enum: [preparation, booking, packing, documents, transport, accommodation, activities, health, finances, communication, other]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
        dueDate:
          type: string
          format: date-time
        assignedTo:
          type: string
        estimatedDuration:
          type: integer
        reminderDate:
          type: string
          format: date-time
        notes:
          type: string

    JobStatus:
      type: object
      properties:
        jobId:
          type: string
          example: "64f123abc456789012345678"
        status:
          type: string
          enum: [pending, running, completed, failed]
          example: "running"
        progress:
          type: object
          properties:
            total:
              type: integer
              example: 10
            completed:
              type: integer
              example: 7
            percentage:
              type: number
              format: float
              example: 70.0
        startedAt:
          type: string
          format: date-time
          example: "2024-08-01T10:00:00.000Z"
        completedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-08-01T10:15:00.000Z"
        errorMessage:
          type: string
          nullable: true
          description: "Message d'erreur si échec"
        results:
          type: object
          description: "Résultats spécifiques au type de job"
          additionalProperties: true

    TravelTimeJobResults:
      allOf:
        - $ref: '#/components/schemas/JobStatus'
        - type: object
          properties:
            results:
              type: object
              properties:
                stepsProcessed:
                  type: integer
                  example: 5
                totalDistance:
                  type: number
                  format: float
                  example: 1247.8
                  description: "Distance totale en km"
                totalTravelTime:
                  type: integer
                  example: 720
                  description: "Temps total en minutes"
                inconsistentSteps:
                  type: integer
                  example: 1
                  description: "Nombre d'étapes avec incohérences"
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      stepId:
                        type: string
                        format: objectid
                      stepName:
                        type: string
                      error:
                        type: string

    UserSettings:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef7"
        userId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef1"
        systemPrompt:
          type: string
          example: "Tu es le narrateur officiel de MonPetitRoadtrip..."
          description: "Prompt système pour l'IA"
        algoliaSearchRadius:
          type: integer
          example: 50000
          minimum: 1000
          maximum: 200000
          description: "Rayon de recherche Algolia en mètres"
        dragSnapInterval:
          type: integer
          enum: [5, 10, 15, 30, 60]
          example: 15
          description: "Intervalle de snap en minutes pour le planning"
        preferences:
          type: object
          properties:
            defaultCurrency:
              type: string
              example: "EUR"
            language:
              type: string
              example: "fr"
            timezone:
              type: string
              example: "Europe/Paris"
        notifications:
          type: object
          properties:
            email:
              type: boolean
              example: true
            push:
              type: boolean
              example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserSettingsInput:
      type: object
      properties:
        systemPrompt:
          type: string
        algoliaSearchRadius:
          type: integer
          minimum: 1000
          maximum: 200000
        dragSnapInterval:
          type: integer
          enum: [5, 10, 15, 30, 60]
        preferences:
          type: object
          properties:
            defaultCurrency:
              type: string
            language:
              type: string
            timezone:
              type: string
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean

    Conversation:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef8"
        roadtripId:
          type: string
          format: objectid
          example: "64a1b2c3d4e5f6789abcdef0"
        title:
          type: string
          example: "Modification du planning"
          description: "Titre de la conversation"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        messageCount:
          type: integer
          example: 5
          description: "Nombre de messages dans la conversation"

    ConversationDetailed:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            messages:
              type: array
              items:
                type: object
                properties:
                  role:
                    type: string
                    enum: [user, assistant]
                    example: "user"
                  content:
                    type: string
                    example: "Ajoute une visite du Louvre demain"
                  timestamp:
                    type: string
                    format: date-time

    GoogleMapsReview:
      type: object
      properties:
        author_name:
          type: string
          example: "Jean Dupont"
          description: "Nom de l'auteur de l'avis"
        rating:
          type: number
          format: float
          example: 4.5
          description: "Note de 1 à 5"
        text:
          type: string
          example: "Excellent musée, visite recommandée"
          description: "Texte de l'avis"
        time:
          type: integer
          example: 1627891200
          description: "Timestamp Unix de l'avis"
        profile_photo_url:
          type: string
          format: uri
          description: "URL de la photo de profil"
        relative_time_description:
          type: string
          example: "il y a 2 mois"
          description: "Description relative du temps"

    GoogleMapsDirection:
      type: object
      properties:
        distance:
          type: object
          properties:
            text:
              type: string
              example: "245 km"
            value:
              type: integer
              example: 245000
              description: "Distance en mètres"
        duration:
          type: object
          properties:
            text:
              type: string
              example: "2 h 45 min"
            value:
              type: integer
              example: 9900
              description: "Durée en secondes"
        start_address:
          type: string
          example: "Paris, France"
        end_address:
          type: string
          example: "Lyon, France"
        overview_polyline:
          type: object
          properties:
            points:
              type: string
              description: "Polyline encodée pour affichage sur carte"

  # ===== RÉPONSES COMMUNES =====
  responses:
    BadRequest:
      description: Erreur de validation des données
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              summary: Erreur de validation
              value:
                msg: "Validation failed"
                errors:
                  name: ["Le nom est requis"]
                  email: ["Format email invalide"]

    Unauthorized:
      description: Non autorisé - Token manquant ou invalide
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            no_token:
              summary: Token manquant
              value:
                msg: "No token, authorization denied"
            invalid_token:
              summary: Token invalide
              value:
                msg: "Token is not valid"

    Forbidden:
      description: Accès interdit - Permissions insuffisantes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            msg: "User not authorized"

    NotFound:
      description: Ressource non trouvée
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            roadtrip_not_found:
              summary: Roadtrip introuvable
              value:
                msg: "Roadtrip not found"
            step_not_found:
              summary: Étape introuvable
              value:
                msg: "Step not found"

    Conflict:
      description: Conflit - Opération déjà en cours
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            msg: "Un calcul est déjà en cours pour ce roadtrip"

    ServerError:
      description: Erreur interne du serveur
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            msg: "Server error"

# ===== TAGS =====
tags:
  - name: Authentification
    description: Gestion des utilisateurs et authentification JWT
  - name: Roadtrips
    description: CRUD des roadtrips avec génération IA
  - name: Steps
    description: Gestion des étapes de roadtrip (Stage/Stop)
  - name: Activities
    description: Activités par étape avec support IA
  - name: Accommodations
    description: Hébergements par étape
  - name: Tasks
    description: Tâches de préparation de roadtrip
  - name: Travel Time
    description: Calcul et synchronisation des temps de trajet
  - name: Chatbot
    description: Assistant IA conversationnel
  - name: Stories
    description: Génération de récits de voyage
  - name: Google Maps
    description: Intégration Google Maps pour avis et directions
  - name: Settings
    description: Paramètres utilisateur

# ===== ROUTES =====
paths:
  # ===== AUTHENTIFICATION =====
  /auth/register:
    post:
      tags: [Authentification]
      summary: Inscription nouvel utilisateur
      description: Créer un nouveau compte utilisateur avec username, email et mot de passe
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                  example: "jean_dupont"
                  description: "Nom d'utilisateur unique"
                email:
                  type: string
                  format: email
                  example: "jean.dupont@email.com"
                  description: "Adresse email unique"
                password:
                  type: string
                  minLength: 6
                  example: "motdepasse123"
                  description: "Mot de passe (minimum 6 caractères)"
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    description: "Token JWT pour authentification"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      tags: [Authentification]
      summary: Connexion utilisateur
      description: Authentifier un utilisateur avec email et mot de passe
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "jean.dupont@email.com"
                password:
                  type: string
                  example: "motdepasse123"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/logout:
    get:
      tags: [Authentification]
      summary: Déconnexion utilisateur
      description: Déconnecter l'utilisateur actuel
      responses:
        '200':
          description: Déconnexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  /auth/forgot-password:
    post:
      tags: [Authentification]
      summary: Demande de réinitialisation mot de passe
      description: Envoyer un email pour réinitialiser le mot de passe
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "jean.dupont@email.com"
      responses:
        '200':
          description: Email de réinitialisation envoyé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/reset-password/{token}:
    post:
      tags: [Authentification]
      summary: Réinitialiser mot de passe
      description: Réinitialiser le mot de passe avec le token reçu par email
      security: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de réinitialisation reçu par email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  minLength: 6
                  example: "nouveaumotdepasse123"
      responses:
        '200':
          description: Mot de passe réinitialisé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/status:
    get:
      tags: [Authentification]
      summary: Vérifier statut de connexion
      description: Vérifier si l'utilisateur est connecté et retourner ses informations
      security: []
      responses:
        '200':
          description: Statut utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuthenticated:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'

  # ===== ROADTRIPS - GESTION PRINCIPALE =====
  /roadtrips:
    get:
      tags: [Roadtrips]
      summary: Obtenir liste des roadtrips utilisateur
      description: Récupérer tous les roadtrips de l'utilisateur connecté avec pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Numéro de page
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page
      responses:
        '200':
          description: Liste des roadtrips
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  roadtrips:
                    type: array
                    items:
                      $ref: '#/components/schemas/Roadtrip'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Roadtrips]
      summary: Créer nouveau roadtrip
      description: Créer un nouveau roadtrip avec support de fichiers (photos, documents, thumbnail)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: JSON stringifié des données du roadtrip
                  example: '{"name":"Roadtrip en France","startLocation":"Paris","startDateTime":"2024-08-01T09:00:00.000Z"}'
                thumbnail:
                  type: string
                  format: binary
                  description: Image miniature du roadtrip
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Photos du roadtrip (max 10)
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Documents du roadtrip (max 10)
      responses:
        '201':
          description: Roadtrip créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roadtrip'
        '400':
          $ref: '#/components/responses/BadRequest'

  /roadtrips/ai:
    post:
      tags: [Roadtrips]
      summary: Générer roadtrip complet via IA (synchrone)
      description: |
        Générer un roadtrip complet avec étapes, hébergements et activités via l'IA.
        Version synchrone - pour de gros roadtrips, utiliser /roadtrips/ai/async
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [startLocation]
              properties:
                startLocation:
                  type: string
                  example: "Paris, France"
                  description: "Point de départ du roadtrip (obligatoire)"
                endLocation:
                  type: string
                  example: "Nice, France"
                  description: "Destination finale (optionnel)"
                startDate:
                  type: string
                  format: date
                  example: "2024-08-01"
                  description: "Date de début (YYYY-MM-DD)"
                endDate:
                  type: string
                  format: date
                  example: "2024-08-15"
                  description: "Date de fin (YYYY-MM-DD)"
                duration:
                  type: integer
                  example: 14
                  description: "Durée en jours (alternative à endDate)"
                budget:
                  type: number
                  example: 1500
                  description: "Budget total pour le voyage"
                travelers:
                  type: integer
                  example: 2
                  description: "Nombre de voyageurs"
                description:
                  type: string
                  example: "Je veux un roadtrip de 7 jours dans le sud de la France avec des visites culturelles"
                  description: "Description en langage naturel du voyage souhaité"
                preferences:
                  type: object
                  description: "Préférences de voyage"
                  properties:
                    themes:
                      type: array
                      items:
                        type: string
                      example: ["culture", "gastronomie"]
                    accommodation_type:
                      type: string
                      example: "hotel"
      responses:
        '201':
          description: Roadtrip généré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripDetailed'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /roadtrips/ai/async:
    post:
      tags: [Roadtrips]
      summary: Générer roadtrip complet via IA (asynchrone)
      description: |
        Lancer la génération asynchrone d'un roadtrip complet.
        Retourne un jobId pour suivre la progression.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [startLocation]
              properties:
                startLocation:
                  type: string
                  example: "Paris, France"
                endLocation:
                  type: string
                  example: "Nice, France"
                startDate:
                  type: string
                  format: date
                  example: "2024-08-01"
                endDate:
                  type: string
                  format: date
                  example: "2024-08-15"
                duration:
                  type: integer
                  example: 14
                budget:
                  type: number
                  example: 1500
                travelers:
                  type: integer
                  example: 2
                description:
                  type: string
                  example: "Roadtrip familial dans le sud de la France"
                preferences:
                  type: object
      responses:
        '200':
          description: Job de génération lancé
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: "64f123abc456789012345678"
                  status:
                    type: string
                    enum: [pending, planning]
                    example: "pending"

  /roadtrips/ai/jobs/{jobId}:
    get:
      tags: [Roadtrips]
      summary: Statut job génération IA
      description: Vérifier le statut et la progression d'un job de génération de roadtrip
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: ID du job de génération
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [pending, planning, detailing, creating, completed, failed]
                  progress:
                    type: object
                    properties:
                      percentage:
                        type: number
                        example: 75
                      currentStep:
                        type: string
                        example: "Création des activités"
                  results:
                    type: object
                    properties:
                      roadtripId:
                        type: string
                        format: objectid
                      stepsCreated:
                        type: integer
                      accommodationsCreated:
                        type: integer
                      activitiesCreated:
                        type: integer

  /roadtrips/ai/jobs:
    get:
      tags: [Roadtrips]
      summary: Historique jobs génération IA
      description: Liste des jobs de génération IA de l'utilisateur
      responses:
        '200':
          description: Liste des jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    jobId:
                      type: string
                    status:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    completedAt:
                      type: string
                      format: date-time

  /roadtrips/{idRoadtrip}:
    get:
      tags: [Roadtrips]
      summary: Obtenir détails d'un roadtrip
      description: Récupérer les détails complets d'un roadtrip avec ses étapes, hébergements et activités
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
          description: ID du roadtrip
      responses:
        '200':
          description: Détails du roadtrip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripDetailed'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Forbidden'

    put:
      tags: [Roadtrips]
      summary: Modifier roadtrip
      description: Modifier un roadtrip existant avec support de fichiers
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: JSON stringifié des modifications
                thumbnail:
                  type: string
                  format: binary
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Roadtrip modifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripDetailed'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Roadtrips]
      summary: Supprimer roadtrip
      description: Supprimer complètement un roadtrip et toutes ses données associées
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Roadtrip supprimé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'

  /roadtrips/{idRoadtrip}/files/{fileId}:
    delete:
      tags: [Roadtrips]
      summary: Supprimer fichier spécifique
      description: Supprimer un fichier spécifique (photo, document, thumbnail) du roadtrip
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Fichier supprimé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===== ROADTRIPS - GESTION DES ÉTAPES =====
  /roadtrips/{idRoadtrip}/steps:
    get:
      tags: [Steps]
      summary: Obtenir étapes d'un roadtrip
      description: Récupérer toutes les étapes d'un roadtrip avec leurs hébergements et activités
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Liste des étapes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailed'

    post:
      tags: [Steps]
      summary: Créer nouvelle étape
      description: Créer une nouvelle étape pour un roadtrip
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                type:
                  type: string
                  enum: [Stage, Stop]
                  example: "Stage"
                name:
                  type: string
                  example: "Lyon"
                address:
                  type: string
                  example: "Lyon, France"
                arrivalDateTime:
                  type: string
                  format: date-time
                  example: "2024-08-05T14:00:00.000Z"
                departureDateTime:
                  type: string
                  format: date-time
                  example: "2024-08-07T10:00:00.000Z"
                notes:
                  type: string
                  example: "Visite du Vieux Lyon"
      responses:
        '201':
          description: Étape créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailed'

  /roadtrips/{idRoadtrip}/steps/natural-language:
    post:
      tags: [Steps]
      summary: Créer étape via IA
      description: |
        Créer une étape en utilisant l'intelligence artificielle pour analyser
        un prompt en français et générer automatiquement les détails
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
                  example: "Ajoute une étape à Lyon avec visite du Vieux Lyon et départ le lendemain matin"
                  description: "Description en langage naturel de l'étape à créer"
      responses:
        '201':
          description: Étape créée par IA
          content:
            application/json:
              schema:
                type: object
                properties:
                  step:
                    $ref: '#/components/schemas/StepDetailed'
                  extractedData:
                    type: object
                    description: "Données extraites du prompt pour debug"

  # ===== STEPS - GESTION INDIVIDUELLE =====
  /steps/{idStep}:
    get:
      tags: [Steps]
      summary: Obtenir informations d'une étape
      description: Récupérer les détails complets d'une étape spécifique
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Détails de l'étape
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailed'

    put:
      tags: [Steps]
      summary: Modifier étape
      description: Modifier une étape existante avec support de fichiers
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: JSON stringifié des modifications
                thumbnail:
                  type: string
                  format: binary
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Étape modifiée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailed'

    delete:
      tags: [Steps]
      summary: Supprimer étape
      description: Supprimer une étape et toutes ses données associées
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Étape supprimée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  # ===== ACCOMMODATIONS =====
  /roadtrips/{idRoadtrip}/steps/{idStep}/accommodations:
    post:
      tags: [Accommodations]
      summary: Créer hébergement
      description: Créer un nouvel hébergement pour une étape avec support de fichiers
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: JSON stringifié des données de l'hébergement
                  example: '{"name":"Hôtel du Louvre","address":"Place André Malraux, 75001 Paris","arrivalDateTime":"2024-08-01T15:00:00.000Z","departureDateTime":"2024-08-03T11:00:00.000Z","price":180,"currency":"EUR"}'
                thumbnail:
                  type: string
                  format: binary
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Hébergement créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'

  # ===== ACTIVITIES =====
  /roadtrips/{idRoadtrip}/steps/{idStep}/activities:
    post:
      tags: [Activities]
      summary: Créer activité
      description: Créer une nouvelle activité pour une étape avec support de fichiers
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: string
                  description: JSON stringifié des données de l'activité
                  example: '{"name":"Musée du Louvre","type":"Visite","address":"Rue de Rivoli, 75001 Paris","startDateTime":"2024-08-01T10:00:00.000Z","endDateTime":"2024-08-01T12:00:00.000Z","price":25.50,"currency":"EUR"}'
                thumbnail:
                  type: string
                  format: binary
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Activité créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'

  /roadtrips/{idRoadtrip}/steps/{idStep}/activities/natural-language:
    post:
      tags: [Activities]
      summary: Créer activité via IA
      description: |
        Créer une activité en utilisant l'intelligence artificielle pour analyser
        un prompt en français et générer automatiquement les détails
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                prompt:
                  type: string
                  example: "Ajoute une visite du Musée du Louvre demain à 14h"
                  description: "Description en langage naturel de l'activité"
                userLatitude:
                  type: number
                  example: 48.8566
                  description: "Latitude de l'utilisateur (optionnel)"
                userLongitude:
                  type: number
                  example: 2.3522
                  description: "Longitude de l'utilisateur (optionnel)"
      responses:
        '201':
          description: Activité créée par IA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'

# ===== TASKS - GESTION DES TÂCHES =====
  /roadtrips/{roadtripId}/tasks:
    get:
      tags: [Tasks]
      summary: "Lister les tâches d'un roadtrip"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        200:
          description: "Liste des tâches"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoadtripTask'

    post:
      tags: [Tasks]
      summary: "Créer une nouvelle tâche"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoadtripTaskInput'
      responses:
        201:
          description: "Tâche créée avec succès"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripTask'

  /roadtrips/{roadtripId}/tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: "Obtenir une tâche spécifique"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        200:
          description: "Détails de la tâche"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripTask'

    put:
      tags: [Tasks]
      summary: "Modifier une tâche"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoadtripTaskInput'
      responses:
        200:
          description: "Tâche modifiée avec succès"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripTask'

    delete:
      tags: [Tasks]
      summary: "Supprimer une tâche"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        204:
          description: "Tâche supprimée avec succès"

# ===== TRAVEL TIME ASYNC - CALCUL ASYNCHRONE =====
  /roadtrips/{roadtripId}/travel-time:
    post:
      tags: [Travel Time]
      summary: "Lancer le calcul asynchrone des temps de trajet"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        202:
          description: "Job lancé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: "64f123abc456789012345678"
                  message:
                    type: string
                    example: "Calcul des temps de trajet en cours"

  /jobs/{jobId}/status:
    get:
      tags: [Travel Time]
      summary: "Vérifier le statut d'un job"
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Statut du job"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelTimeJobResults'

# ===== CHATBOT - ASSISTANT IA =====
  /chatbot/{roadtripId}/conversations:
    get:
      tags: [Chatbot]
      summary: "Lister les conversations d'un roadtrip"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        200:
          description: "Liste des conversations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'

    post:
      tags: [Chatbot]
      summary: "Créer une nouvelle conversation"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Ajoute une visite du Louvre demain"
      responses:
        201:
          description: "Conversation créée"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetailed'

  /chatbot/{roadtripId}/conversations/{conversationId}:
    get:
      tags: [Chatbot]
      summary: "Obtenir une conversation avec tous ses messages"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        200:
          description: "Détails de la conversation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetailed'

    post:
      tags: [Chatbot]
      summary: "Ajouter un message à une conversation"
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Modifie l'heure de départ à 9h"
      responses:
        200:
          description: "Message ajouté, réponse de l'IA"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetailed'

# ===== GOOGLE MAPS - INTÉGRATIONS =====
  /google-maps/reviews:
    post:
      tags: [Google Maps]
      summary: "Récupérer les avis Google Maps d'un lieu"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                placeId:
                  type: string
                  example: "ChIJD7fiBh9u5kcRYJSMaMOCCwQ"
      responses:
        200:
          description: "Avis récupérés"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoogleMapsReview'

  /google-maps/directions:
    post:
      tags: [Google Maps]
      summary: "Calculer un itinéraire"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  example: "Paris, France"
                destination:
                  type: string
                  example: "Lyon, France"
                travelMode:
                  type: string
                  enum: [driving, walking, bicycling, transit]
                  example: "driving"
      responses:
        200:
          description: "Itinéraire calculé"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleMapsDirection'

# ===== USER SETTINGS - PARAMÈTRES UTILISATEUR =====
  /users/{userId}/settings:
    get:
      tags: [User Settings]
      summary: "Obtenir les paramètres utilisateur"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        200:
          description: "Paramètres utilisateur"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

    put:
      tags: [User Settings]
      summary: "Modifier les paramètres utilisateur"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsInput'
      responses:
        200:
          description: "Paramètres modifiés"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

  /roadtrips/{roadtripId}/tasks/{taskId}/status:
    patch:
      tags: [Tasks]
      summary: Basculer statut completion
      description: Basculer rapidement entre 'pending' et 'completed'
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Statut modifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadtripTask'

  /roadtrips/{roadtripId}/tasks/reorder:
    patch:
      tags: [Tasks]
      summary: Réorganiser tâches
      description: Modifier l'ordre d'affichage des tâches
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [taskOrders]
              properties:
                taskOrders:
                  type: array
                  items:
                    type: object
                    required: [taskId, order]
                    properties:
                      taskId:
                        type: string
                        format: objectid
                      order:
                        type: integer
      responses:
        '200':
          description: Tâches réorganisées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  /roadtrips/{roadtripId}/tasks/generate-defaults:
    post:
      tags: [Tasks]
      summary: Générer tâches par défaut
      description: |
        Générer automatiquement des tâches prédéfinies pour le roadtrip.
        Créé des tâches communes comme réservations, documents, bagages, etc.
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '201':
          description: Tâches par défaut générées
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Default tasks generated successfully"
                  tasksCreated:
                    type: integer
                    example: 8

  /roadtrips/{roadtripId}/tasks/generate-ai-async:
    post:
      tags: [Tasks]
      summary: Générer tâches IA (asynchrone)
      description: |
        Lancer la génération asynchrone de tâches personnalisées via IA
        basées sur le contenu du roadtrip
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                replace:
                  type: boolean
                  default: false
                  description: "Remplacer les tâches existantes"
      responses:
        '200':
          description: Job de génération lancé
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [pending, processing]

  /roadtrips/{roadtripId}/tasks/jobs/{jobId}:
    get:
      tags: [Tasks]
      summary: Statut job génération tâches IA
      description: Vérifier le statut d'un job de génération de tâches IA
      parameters:
        - name: roadtripId
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JobStatus'
                  - type: object
                    properties:
                      results:
                        type: object
                        properties:
                          tasks:
                            type: array
                            items:
                              type: string
                              format: objectid
                          count:
                            type: integer

  # ===== TRAVEL TIME & SYNCHRONISATION =====
  /roadtrips/{idRoadtrip}/travel-time/refresh:
    patch:
      tags: [Travel Time]
      summary: Recalculer temps trajet (synchrone)
      description: |
        Recalculer immédiatement tous les temps de trajet du roadtrip.
        Version synchrone - peut prendre du temps pour de gros roadtrips.
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Temps de trajet recalculés
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Travel times updated successfully"
                  stepsProcessed:
                    type: integer
                    example: 5
                  totalDistance:
                    type: number
                    format: float
                    example: 1250.5
                  totalTravelTime:
                    type: integer
                    example: 720
        '409':
          $ref: '#/components/responses/Conflict'

  /roadtrips/{idRoadtrip}/travel-time/refresh/async:
    patch:
      tags: [Travel Time]
      summary: Lancer calcul temps trajet asynchrone
      description: |
        Lancer le calcul asynchrone des temps de trajet.
        Recommandé pour les roadtrips avec beaucoup d'étapes.
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Job de calcul lancé
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: "64f123abc456789012345678"
                  status:
                    type: string
                    enum: [pending, running]

  /roadtrips/{idRoadtrip}/travel-time/jobs/{jobId}/status:
    get:
      tags: [Travel Time]
      summary: Statut job calcul temps trajet
      description: Vérifier le statut et la progression d'un job de calcul
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelTimeJobResults'

  /roadtrips/{idRoadtrip}/travel-time/jobs:
    get:
      tags: [Travel Time]
      summary: Liste jobs calcul temps trajet
      description: Historique des jobs de calcul pour ce roadtrip
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Liste des jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TravelTimeJobResults'

  /roadtrips/{idRoadtrip}/steps/sync/async:
    patch:
      tags: [Travel Time]
      summary: Synchroniser heures étapes (asynchrone)
      description: |
        Lancer la synchronisation asynchrone des heures d'arrivée/départ
        de toutes les étapes en tenant compte des temps de trajet
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Job de synchronisation lancé
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running]

  /roadtrips/{idRoadtrip}/steps/sync/jobs/{jobId}/status:
    get:
      tags: [Travel Time]
      summary: Statut job synchronisation étapes
      description: Vérifier le statut d'un job de synchronisation des heures
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'

  /roadtrips/{idRoadtrip}/steps/sync/jobs:
    get:
      tags: [Travel Time]
      summary: Liste jobs synchronisation étapes
      description: Historique des jobs de synchronisation pour ce roadtrip
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Liste des jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStatus'

  /roadtrips/{idRoadtrip}/steps/{idStep}/sync:
    patch:
      tags: [Travel Time]
      summary: Synchroniser étape individuelle
      description: Synchroniser les heures d'une étape spécifique

      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Étape synchronisée
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Step synchronized successfully"
                  changes:
                    type: object
                    properties:
                      arrivalDateTime:
                        type: object
                        properties:
                          before:
                            type: string
                            format: date-time
                          after:
                            type: string
                            format: date-time
                      departureDateTime:
                        type: object
                        properties:
                          before:
                            type: string
                            format: date-time
                          after:
                            type: string
                            format: date-time

  /roadtrips/{idRoadtrip}/steps/{idStep}/fix-dates:
    patch:
      tags: [Travel Time]
      summary: Corriger dates étape
      description: |
        Recalculer et corriger automatiquement les dates d'une étape
        en tenant compte des hébergements et des temps de trajet
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Dates corrigées
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Step dates fixed successfully"
                  accommodationsFixes:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        oldNights:
                          type: integer
                        newNights:
                          type: integer

  # ===== STORIES - RÉCITS DE VOYAGE =====
  /steps/{idStep}/story:
    get:
      tags: [Stories]
      summary: Générer récit d'étape
      description: |
        Générer un récit chronologique de l'étape en analysant
        les hébergements, activités et notes
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Récit généré
          content:
            application/json:
              schema:
                type: object
                properties:
                  story:
                    type: string
                    example: "Notre journée à Paris a commencé par un petit-déjeuner à l'hôtel..."

    patch:
      tags: [Stories]
      summary: Régénérer récit
      description: Forcer la régénération du récit d'une étape
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Récit régénéré
          content:
            application/json:
              schema:
                type: object
                properties:
                  story:
                    type: string

  /steps/{idStep}/story/with-photos:
    get:
      tags: [Stories]
      summary: Générer récit avec photos
      description: |
        Générer un récit en analysant aussi les photos (GPT-4 Vision)
        si activé dans les paramètres utilisateur
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Récit avec analyse photos
          content:
            application/json:
              schema:
                type: object
                properties:
                  story:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                      format: uri
                    description: "URLs des photos analysées"

  /steps/{idStep}/story/async:
    post:
      tags: [Stories]
      summary: Générer récit asynchrone
      description: Lancer la génération asynchrone du récit
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Job de génération lancé
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string

  /steps/{idStep}/story/{jobId}/status:
    get:
      tags: [Stories]
      summary: Statut job génération récit
      description: Vérifier le statut d'un job de génération de récit
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'

  # ===== TRAILS & RANDONNÉES =====
  /steps/{idStep}/hikes-algolia:
    get:
      tags: [Steps]
      summary: Randonnées Algolia pour étape
      description: |
        Rechercher des randonnées via l'API Algolia dans le rayon
        configuré autour de l'étape
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: radius
          in: query
          schema:
            type: integer
            default: 50000
          description: "Rayon de recherche en mètres"
      responses:
        '200':
          description: Randonnées trouvées
          content:
            application/json:
              schema:
                type: object
                properties:
                  trails:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        distance:
                          type: number
                        elevation:
                          type: number
                        difficulty:
                          type: string
                        coordinates:
                          type: object
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number

  /steps/{idStep}/hikes-suggestion:
    get:
      tags: [Steps]
      summary: Suggestions randonnées étape
      description: Obtenir des suggestions de randonnées personnalisées
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Suggestions de randonnées
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object

  /steps/trails/{idTrail}/reviews/summary:
    get:
      tags: [Steps]
      summary: Synthèse avis randonnée
      description: |
        Générer une synthèse IA des avis d'une randonnée
        pour aider à la décision
      parameters:
        - name: idTrail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Synthèse des avis
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    example: "Cette randonnée est appréciée pour ses paysages magnifiques mais attention à la difficulté..."
                  averageRating:
                    type: number
                    format: float
                    example: 4.2
                  totalReviews:
                    type: integer
                    example: 47

  /steps/{idStep}/refresh-travel-time:
    patch:
      tags: [Steps]
      summary: Recalculer temps trajet étape
      description: |
        Recalculer le temps de trajet d'une étape spécifique
        par rapport à l'étape précédente
      parameters:
        - name: idStep
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Temps de trajet recalculé
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Travel time refreshed successfully"
                  travelTime:
                    type: integer
                    example: 120
                    description: "Nouveau temps en minutes"
                  distance:
                    type: number
                    format: float
                    example: 95.3
                    description: "Distance en km"

  # ===== CHATBOT & ASSISTANT IA =====
  /roadtrips/{idRoadtrip}/chat/query:
    post:
      tags: [Chatbot]
      summary: Requête assistant IA
      description: |
        Traiter une requête utilisateur en langage naturel.
        L'assistant peut modifier le roadtrip, ajouter des éléments,
        répondre à des questions, etc.
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  example: "Ajoute une visite du Louvre demain matin à 10h"
                  description: "Message en langage naturel"
                conversationId:
                  type: string
                  format: objectid
                  description: "ID conversation existante (optionnel)"
      responses:
        '200':
          description: Réponse de l'assistant
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: "Réponse immédiate"
                    properties:
                      response:
                        type: string
                        example: "J'ai ajouté la visite du Louvre à votre planning demain à 10h"
                      conversationId:
                        type: string
                        format: objectid
                      changes:
                        type: object
                        description: "Modifications apportées au roadtrip"
                  - type: object
                    description: "Traitement asynchrone"
                    properties:
                      jobId:
                        type: string
                      status:
                        type: string
                        enum: [pending, processing]

  /roadtrips/{idRoadtrip}/chat/jobs/{jobId}/status:
    get:
      tags: [Chatbot]
      summary: Statut job traitement chatbot
      description: Vérifier le statut d'un job de traitement de requête
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statut du job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'

  /roadtrips/{idRoadtrip}/chat/conversations:
    get:
      tags: [Chatbot]
      summary: Historique conversations
      description: Récupérer l'historique des conversations avec l'assistant
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Liste des conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /roadtrips/{idRoadtrip}/chat/conversations/{conversationId}:
    get:
      tags: [Chatbot]
      summary: Conversation spécifique
      description: Récupérer les détails complets d'une conversation
      parameters:
        - name: idRoadtrip
          in: path
          required: true
          schema:
            type: string
            format: objectid
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: objectid
      responses:
        '200':
          description: Détails de la conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetailed'

  # ===== GOOGLE MAPS =====
  /gm/reviews:
    get:
      tags: [Google Maps]
      summary: Avis lieu Google Maps
      description: Récupérer les avis d'un lieu via l'API Google Places
      parameters:
        - name: placeId
          in: query
          required: true
          schema:
            type: string
          description: "Place ID Google Maps"
          example: "ChIJD7fiBh9u5kcRYJSMaMOCCwQ"
      responses:
        '200':
          description: Avis du lieu
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/GoogleMapsReview'

  /gm/steps/reviews:
    get:
      tags: [Google Maps]
      summary: Avis lieu par adresse
      description: |
        Récupérer les avis d'un lieu en utilisant son adresse.
        Effectue d'abord une recherche de lieu puis récupère les avis.
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
          description: "Adresse du lieu"
          example: "Musée du Louvre, Paris"
      responses:
        '200':
          description: Avis du lieu
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/GoogleMapsReview'
        '404':
          description: Lieu non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lieu non trouvé."

  /gm/directions:
    get:
      tags: [Google Maps]
      summary: Calculer itinéraire
      description: |
        Calculer un itinéraire entre deux points avec l'API Google Directions.
        Retourne distance, durée et étapes détaillées.
      parameters:
        - name: origin
          in: query
          required: true
          schema:
            type: string
          description: "Point de départ"
          example: "Paris, France"
        - name: destination
          in: query
          required: true
          schema:
            type: string
          description: "Point d'arrivée"
          example: "Lyon, France"
        - name: mode
          in: query
          schema:
            type: string
            enum: [driving, walking, transit, bicycling]
            default: driving
          description: "Mode de transport"
      responses:
        '200':
          description: Itinéraire calculé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleMapsDirection'

  /gm/trails:
    get:
      tags: [Google Maps]
      summary: Randonnées par adresse
      description: |
        Rechercher des sentiers de randonnée autour d'une adresse
        en utilisant l'API Google Places et les données locales
      parameters:
        - name: address
          in: query
          required: true
          schema:
            type: string
          description: "Adresse de recherche"
        - name: radius
          in: query
          schema:
            type: integer
            default: 50000
          description: "Rayon de recherche en mètres"
      responses:
        '200':
          description: Sentiers trouvés
          content:
            application/json:
              schema:
                type: object
                properties:
                  trails:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        address:
                          type: string
                        distance:
                          type: number
                        elevation:
                          type: number

  # ===== PARAMÈTRES UTILISATEUR =====
  /settings:
    get:
      tags: [Settings]
      summary: Obtenir paramètres utilisateur
      description: |
        Récupérer tous les paramètres personnalisés de l'utilisateur
        (prompt IA, rayon recherche, intervalle planning, etc.)
      responses:
        '200':
          description: Paramètres utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

    put:
      tags: [Settings]
      summary: Modifier paramètres utilisateur
      description: |
        Mettre à jour les paramètres utilisateur.
        Tous les champs sont optionnels, seuls les champs fournis seront modifiés.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsInput'
      responses:
        '200':
          description: Paramètres modifiés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

  # ===== AUTOCOMPLÉTION =====
  /autocomplete:
    get:
      tags: [Google Maps]
      summary: Autocomplétion d'adresses
      description: |
        Autocomplétion d'adresses via l'API Google Places Autocomplete.
        Utilisé pour les champs d'adresse dans l'interface utilisateur.
      security: []
      parameters:
        - name: input
          in: query
          required: true
          schema:
            type: string
          description: "Texte saisi par l'utilisateur"
          example: "Paris"
      responses:
        '200':
          description: Suggestions d'adresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  predictions:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          example: "Paris, France"
                        place_id:
                          type: string
                          example: "ChIJD7fiBh9u5kcRYJSMaMOCCwQ"
                        types:
                          type: array
                          items:
                            type: string
