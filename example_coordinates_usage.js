/**
 * Exemples d'utilisation de l'API de recalcul des coordonn√©es
 * Ce fichier montre comment utiliser les diff√©rents endpoints dans votre frontend
 */

const API_BASE_URL = 'http://localhost:3000';

/**
 * Classe utilitaire pour l'API de recalcul des coordonn√©es
 */
class CoordinatesAPI {
    constructor(token) {
        this.token = token;
        this.headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
    }

    /**
     * Effectue une requ√™te POST vers l'API
     */
    async makeRequest(endpoint) {
        try {
            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                method: 'POST',
                headers: this.headers
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || `HTTP ${response.status}`);
            }

            return data;
        } catch (error) {
            console.error(`Erreur lors de la requ√™te vers ${endpoint}:`, error);
            throw error;
        }
    }

    /**
     * Recalcule les coordonn√©es de tous les √©l√©ments de l'utilisateur
     */
    async recalculateAllCoordinates() {
        console.log('üîÑ D√©marrage du recalcul de tous les √©l√©ments...');
        const result = await this.makeRequest('/coordinates/recalculate/all');
        console.log('‚úÖ Recalcul termin√©:', result.results.summary);
        return result;
    }

    /**
     * Recalcule les coordonn√©es d'un type d'√©l√©ment sp√©cifique
     * @param {string} elementType - 'roadtrips', 'steps', 'accommodations', ou 'activities'
     */
    async recalculateByType(elementType) {
        console.log(`üîÑ D√©marrage du recalcul pour ${elementType}...`);
        const result = await this.makeRequest(`/coordinates/recalculate/${elementType}`);
        console.log(`‚úÖ Recalcul termin√© pour ${elementType}:`, result.results.summary);
        return result;
    }

    /**
     * Recalcule les coordonn√©es de tous les √©l√©ments d'un roadtrip sp√©cifique
     * @param {string} roadtripId - L'ID du roadtrip
     */
    async recalculateRoadtrip(roadtripId) {
        console.log(`üîÑ D√©marrage du recalcul pour le roadtrip ${roadtripId}...`);
        const result = await this.makeRequest(`/coordinates/recalculate/roadtrip/${roadtripId}`);
        console.log(`‚úÖ Recalcul termin√© pour le roadtrip ${roadtripId}:`, result.results.summary);
        return result;
    }
}

/**
 * Exemples d'utilisation
 */
async function exempleUtilisation() {
    // Remplacez par votre token JWT valide
    const token = 'YOUR_JWT_TOKEN_HERE';
    const api = new CoordinatesAPI(token);

    try {
        // Exemple 1: Recalculer toutes les coordonn√©es
        console.log('=== Exemple 1: Recalcul global ===');
        const resultGlobal = await api.recalculateAllCoordinates();
        
        // Analyser les r√©sultats
        console.log('R√©sultats d√©taill√©s:');
        console.log(`- Roadtrips trait√©s: ${resultGlobal.results.roadtrips.length}`);
        console.log(`- Steps trait√©s: ${resultGlobal.results.steps.length}`);
        console.log(`- Accommodations trait√©es: ${resultGlobal.results.accommodations.length}`);
        console.log(`- Activit√©s trait√©es: ${resultGlobal.results.activities.length}`);
        
        console.log('\n=== Exemple 2: Recalcul par type ===');
        
        // Exemple 2: Recalculer seulement les accommodations
        const resultAccommodations = await api.recalculateByType('accommodations');
        console.log('Accommodations avec coordonn√©es mises √† jour:');
        resultAccommodations.results.elements
            .filter(elem => elem.success)
            .forEach(elem => {
                console.log(`- ${elem.id}: ${elem.oldCoordinates.latitude},${elem.oldCoordinates.longitude} ‚Üí ${elem.newCoordinates.latitude},${elem.newCoordinates.longitude}`);
            });

        // Exemple 3: Recalculer un roadtrip sp√©cifique
        // const roadtripId = 'YOUR_ROADTRIP_ID_HERE';
        // const resultRoadtrip = await api.recalculateRoadtrip(roadtripId);

    } catch (error) {
        console.error('Erreur lors des exemples:', error);
    }
}

/**
 * Fonction utilitaire pour afficher les r√©sultats de mani√®re format√©e
 */
function displayResults(results) {
    console.log('\nüìä R√©sum√© du traitement:');
    console.log(`Total: ${results.summary.total}`);
    console.log(`Succ√®s: ${results.summary.success}`);
    console.log(`Erreurs: ${results.summary.errors}`);
    console.log(`Ignor√©s (pas d'adresse): ${results.summary.skipped}`);
    
    if (results.summary.errors > 0) {
        console.log('\n‚ùå √âl√©ments en erreur:');
        // Afficher tous les √©l√©ments en erreur selon le type de r√©sultat
        ['roadtrips', 'steps', 'accommodations', 'activities', 'elements'].forEach(type => {
            if (results[type]) {
                results[type]
                    .filter(elem => !elem.success && elem.message !== 'Aucune adresse d√©finie')
                    .forEach(elem => {
                        console.log(`- ${elem.type} ${elem.id}: ${elem.message}`);
                    });
            }
        });
    }
    
    if (results.summary.success > 0) {
        console.log('\n‚úÖ Coordonn√©es mises √† jour avec succ√®s:');
        ['roadtrips', 'steps', 'accommodations', 'activities', 'elements'].forEach(type => {
            if (results[type]) {
                results[type]
                    .filter(elem => elem.success)
                    .forEach(elem => {
                        console.log(`- ${elem.type} ${elem.id}: ${elem.newCoordinates.latitude}, ${elem.newCoordinates.longitude}`);
                    });
            }
        });
    }
}

/**
 * Int√©gration dans une interface utilisateur
 */
function setupUIIntegration() {
    // Exemple d'int√©gration dans une page HTML
    
    // Bouton pour recalculer toutes les coordonn√©es
    const recalculateAllBtn = document.getElementById('recalculate-all-btn');
    if (recalculateAllBtn) {
        recalculateAllBtn.addEventListener('click', async () => {
            try {
                recalculateAllBtn.disabled = true;
                recalculateAllBtn.textContent = 'Recalcul en cours...';
                
                const token = localStorage.getItem('jwt_token'); // ou votre m√©thode de stockage du token
                const api = new CoordinatesAPI(token);
                
                const results = await api.recalculateAllCoordinates();
                
                // Afficher une notification de succ√®s
                showNotification(`Recalcul termin√©: ${results.results.summary.success} √©l√©ments mis √† jour`, 'success');
                
                // Optionnel: rafra√Æchir les donn√©es affich√©es
                await refreshDisplayedData();
                
            } catch (error) {
                showNotification(`Erreur lors du recalcul: ${error.message}`, 'error');
            } finally {
                recalculateAllBtn.disabled = false;
                recalculateAllBtn.textContent = 'Recalculer toutes les coordonn√©es';
            }
        });
    }
}

/**
 * Fonction utilitaire pour afficher des notifications
 */
function showNotification(message, type = 'info') {
    // Impl√©mentation de notification selon votre framework UI
    console.log(`[${type.toUpperCase()}] ${message}`);
}

/**
 * Fonction pour rafra√Æchir les donn√©es affich√©es (√† adapter selon votre app)
 */
async function refreshDisplayedData() {
    // Impl√©menter selon votre logique de rafra√Æchissement
    console.log('Rafra√Æchissement des donn√©es...');
}

// Export pour utilisation en module
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { CoordinatesAPI, displayResults };
}

// Pour utilisation directe dans le navigateur
if (typeof window !== 'undefined') {
    window.CoordinatesAPI = CoordinatesAPI;
    window.displayResults = displayResults;
    
    // Setup automatique si la page est charg√©e
    document.addEventListener('DOMContentLoaded', setupUIIntegration);
}

// D√©commenter pour ex√©cuter les exemples
// exempleUtilisation();
