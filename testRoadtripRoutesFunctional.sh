#!/bin/bash

echo "üß™ Test de l'organisation FONCTIONNELLE de roadtripRoutes.js"
echo "=========================================================="

cd "$(dirname "$0")"

# Test syntaxe
echo "üìã Test 1: V√©rification syntaxe..."
node -c server/routes/roadtripRoutes.js
if [ $? -eq 0 ]; then
    echo "‚úÖ Syntaxe correcte"
else
    echo "‚ùå Erreur syntaxe"
    exit 1
fi

# Analyse des modules fonctionnels
echo "üìã Test 2: Analyse des modules fonctionnels..."

ROADTRIP_COUNT=$(grep -c "roadtripController\." server/routes/roadtripRoutes.js)
STEP_COUNT=$(grep -c "stepController\." server/routes/roadtripRoutes.js)
ACCOMMODATION_COUNT=$(grep -c "accommodationController\." server/routes/roadtripRoutes.js)
ACTIVITY_COUNT=$(grep -c "activityController\." server/routes/roadtripRoutes.js)

echo "   üöó GESTION ROADTRIP: $ROADTRIP_COUNT routes"
echo "   üìç GESTION STEPS: $STEP_COUNT routes"
echo "   üè® ACCOMMODATIONS: $ACCOMMODATION_COUNT routes"
echo "   üéØ ACTIVITIES: $ACTIVITY_COUNT routes"

# V√©rification des sections
echo "üìã Test 3: V√©rification des sections fonctionnelles..."

ROADTRIP_SECTION=$(grep -n "GESTION ROADTRIP" server/routes/roadtripRoutes.js | cut -d: -f1)
STEP_SECTION=$(grep -n "GESTION STEPS" server/routes/roadtripRoutes.js | cut -d: -f1)
ACCOMMODATION_SECTION=$(grep -n "ACCOMMODATIONS" server/routes/roadtripRoutes.js | cut -d: -f1)
ACTIVITY_SECTION=$(grep -n "ACTIVITIES" server/routes/roadtripRoutes.js | cut -d: -f1)
SYNC_SECTION=$(grep -n "TEMPS DE TRAJET & SYNC" server/routes/roadtripRoutes.js | cut -d: -f1)

if [ ! -z "$ROADTRIP_SECTION" ] && [ ! -z "$STEP_SECTION" ] && [ ! -z "$ACCOMMODATION_SECTION" ] && [ ! -z "$ACTIVITY_SECTION" ] && [ ! -z "$SYNC_SECTION" ]; then
    echo "‚úÖ Toutes les sections fonctionnelles pr√©sentes"
    echo "   - ROADTRIP: ligne $ROADTRIP_SECTION"
    echo "   - STEPS: ligne $STEP_SECTION"
    echo "   - ACCOMMODATIONS: ligne $ACCOMMODATION_SECTION"
    echo "   - ACTIVITIES: ligne $ACTIVITY_SECTION"
    echo "   - SYNC/TEMPS: ligne $SYNC_SECTION"
else
    echo "‚ùå Sections fonctionnelles manquantes"
    exit 1
fi

# Workflow logique
echo "üìã Test 4: V√©rification du workflow logique..."

TOTAL_ROUTES=$(grep -c "router\." server/routes/roadtripRoutes.js)
LINES_COUNT=$(wc -l < server/routes/roadtripRoutes.js)

echo "   - Routes totales: $TOTAL_ROUTES"
echo "   - Lignes de code: $LINES_COUNT"

if [ "$TOTAL_ROUTES" -eq 20 ]; then
    echo "‚úÖ Nombre de routes conserv√©"
else
    echo "‚ö†Ô∏è  Nombre de routes diff√©rent (attendu: 20, trouv√©: $TOTAL_ROUTES)"
fi

echo ""
echo "üéâ Organisation fonctionnelle valid√©e !"
echo "üìä R√©sum√© roadtripRoutes.js:"
echo "   üöó Module ROADTRIP: $ROADTRIP_COUNT routes (CRUD principal)"
echo "   üìç Module STEPS: $STEP_COUNT routes (gestion √©tapes)"
echo "   üè® Module ACCOMMODATIONS: $ACCOMMODATION_COUNT routes (h√©bergements)"
echo "   üéØ Module ACTIVITIES: $ACTIVITY_COUNT routes (activit√©s)"
echo "   üîÑ Module SYNC/TEMPS: $((TOTAL_ROUTES - ROADTRIP_COUNT - STEP_COUNT - ACCOMMODATION_COUNT - ACTIVITY_COUNT)) routes (jobs asynchrones)"
echo ""
echo "üîç Avantages organisation fonctionnelle:"
echo "   ‚úÖ Logique m√©tier group√©e par domaine"
echo "   ‚úÖ D√©veloppement par feature facilit√©"
echo "   ‚úÖ Workflows business clairs"
echo "   ‚úÖ Maintenance cibl√©e par module"
